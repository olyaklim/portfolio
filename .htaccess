###################################################################
#Устанавливаем страницы по умолчанию
#Обычно страницей по умолчанию является index.html, однако с помощью этого кода вы можете назначить любую другую страницу по умолчанию:
#Устанавливаем альтернативную страницу по умолчанию
#DirectoryIndex index.html index.php

###################################################################
#Запрещаем просмотр содержимого папки. 
#Существует альтернативное решение, имеющее такой же результат, для этого необходимо разместить в каждой папке вашего сайта пустой файл index.html. Этот метод будет работать только в том случае, если вы не изменяли страницу по умолчанию (см. правило 12). Если изменения были проведены, необходимо размещать файлы с тем новым именем, которое было задано вами в качестве страницы по умолчанию.
#Options All -Indexes

###################################################################
#Выполнять код PHP в файлах HTML. Еще одна директива, позволяет убрать сопоставление по-умолчанию .html и .htm файлов с файлами с гипертекстовой разметкой, и добавить их обработку php-интепретатором:
#RemoveHandler .html .htm
#AddType application/x-httpd-php .php .htm .html .phtml
#Добавив эти строки в .htaccess вы дадите директиву серверу выполнять инструкции PHP не только в файлах с расширением *.php и *.phtml, но и в файлах с расширением *.htm и *.html.

###################################################################
#Убираем расширение файла из URL
#Данный код позволяет удалить расширение файла .php (вы можете изменить его на любое другое, например на т 2.html) из URL-адресов страниц:
#Убираем расширение файла из URL
RewriteEngine On
RewriteRule ^(([^/]+/)*[^.]+)$ /$1.php [L]
#RewriteRule ^(([^/]+/)*[^.]+)$ /$1.html [L]

###################################################################
#Перенаправляем посетителя с помощью директивы RedirectMatch и регулярных выражений
#Еще одна полезная директива, рекомендуемая к использованию Хайпер – RedirectMatch. Цитата из комментариев: «Директива позволяет в качестве запрашиваемого адреса использовать регулярное выражение (пересылка не «с документа», а «со всех документов, типа …»). Редирект внешний — браузеру сообщается о необходимости загрузить другую страницу. Синтаксис:
#RedirectMatch [status] regexp URL
#RedirectMatch 301 ^(.*)$ http://www.google.com/$1

###################################################################
#Глобальное перенаправление (редирект) на другой адрес:
#Перенаправление (редирект) только при запросе определенных страниц:
#Redirect / http://www.google.com

###################################################################
#Перенаправляем со старого домена – на новый
#RewriteEngine On
#RewriteRule ^(.*)$ http://www.yournewdomain.com/$1 [R=301,L]

###################################################################
#Запрещаем доступ для всех, кроме указанных IP-адресов
#ErrorDocument 403 http://your_domain.com
#Order deny,allow
#Deny from all
#Allow from IP1
#Allow from IP2 и т. д.

###################################################################
#Создаем черный список IP адресов
#Если требуется закрыть доступ к вашему ресурсу для определенных IP-адресов, это можно сделать с помощью следующего кода, добавленного в файл .htaccess:
#allow from all
#deny from IP1
#deny from IP2 и т. д.

###################################################################
#Создаем собственные страницы ошибок
#Если вы желаете повысить уникальность вашего ресурса, и для этого хотите заменить стандартный вид страниц ошибок, это возможно с помощью следующего кода:
#Не забудьте создать в корневой директории вашего сервера папку «error» и разместить в ней соответствующие файлы.
#ErrorDocument 401 /error/401.php
#ErrorDocument 403 /error/403.php
ErrorDocument 404 /404.html
#ErrorDocument 500 /error/500.php

###################################################################
#Устанавливаем e-mail адрес по умолчанию для администратора сервера
#ServerSignature EMail
#SetEnv SERVER_ADMIN default@your_domain.com

###################################################################
#Защищаем определенный файл
#Приведенный ниже код позволяет вам запретить доступ к любому файлу — при запросе будет выдаваться ошибка 403. На примере закрыт доступ к самому файлу .htaccess – таким образом можно повысить уровень безопасности сайта:
#Защищаем .htaccess файл
<files .htaccess>
order allow,deny
deny from all
</files>

###################################################################
#Сжимаем компоненты сайта путем включения Gzip
#При использовании Gzip, сервер будет сжимать файлы перед отправкой их пользователю, по средством этого ваш сайт будет грузиться быстрее:
#AddOutputFilterByType DEFLATE text/html text/plain text/xml application/xml application/xhtml+xml text/javascript text/css application/x-javascript
#BrowserMatch ^Mozilla/4 gzip-only-text/html
#BrowserMatch ^Mozilla/4.0[678] no-gzip
#BrowserMatch bMSIE !no-gzip !gzip-only-text/html

###################################################################
#Защищаем сайт
#Данный код позволяет защитить ваш сайт от scripts enjection и нежелательных модификаций «_REQUEST» и/или «GLOBALS»:
#Включаем отслеживание сим-ссылок
#Options +FollowSymLinks
#Запускаем url_rewriting
RewriteEngine On
#Блокируем все ссылки, содержащие <script>
#RewriteCond %{QUERY_STRING} (\<|%3C).*script.*(\>|%3E) [NC,OR]
#Блокируем все скрипты, которые пытаются изменить переменные PHP Globals:
#RewriteCond %{QUERY_STRING} GLOBALS(=|\[|\%[0-9A-Z]{0,2}) [OR]
#Блокируем все скрипты, которые пытаются изменить переменную _REQUEST:
#RewriteCond %{QUERY_STRING} _REQUEST(=|\[|\%[0-9A-Z]{0,2})
#Перенаправляем все подобные на страницу с ошибкой 403 – запрещено
#RewriteRule ^(.*)$ index.php [F,L]









###################################################################
## allow access from 10.x.x.x and 192.168.x.x without password
#Order deny,allow
#Deny from all
#Allow from 127.0.0.1
#Allow from 10.
#Allow from 192.168.

## deny access to all config files
#<Files *.json>
 #   Order Deny,Allow
 #   Deny from all
#</Files>
